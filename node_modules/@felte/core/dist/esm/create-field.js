import { isFormControl, isElement, setControlValue } from '@felte/common';

const observerConfig = {
    attributes: true,
    attributeFilter: ['data-felte-validation-message', 'aria-invalid'],
};
function createField(nameOrConfig, config) {
    var _a, _b;
    let name;
    let defaultValue;
    let touchOnChange;
    let fieldNode;
    let control;
    let onFormReset;
    if (typeof nameOrConfig === 'string') {
        name = nameOrConfig;
        defaultValue = config === null || config === void 0 ? void 0 : config.defaultValue;
        touchOnChange = (_a = config === null || config === void 0 ? void 0 : config.touchOnChange) !== null && _a !== void 0 ? _a : false;
        onFormReset = config === null || config === void 0 ? void 0 : config.onFormReset;
    }
    else {
        name = nameOrConfig.name;
        defaultValue = nameOrConfig.defaultValue;
        touchOnChange = (_b = nameOrConfig.touchOnChange) !== null && _b !== void 0 ? _b : false;
        onFormReset = nameOrConfig === null || nameOrConfig === void 0 ? void 0 : nameOrConfig.onFormReset;
    }
    function dispatchEvent(eventType, value) {
        if (!control)
            return;
        setControlValue(control, value);
        const customEvent = new Event(eventType, {
            bubbles: true,
            composed: true,
        });
        control.dispatchEvent(customEvent);
    }
    function mutationCallback(mutationList) {
        mutationList.forEach(() => {
            const invalid = control.getAttribute('aria-invalid');
            if (!invalid)
                fieldNode.removeAttribute('aria-invalid');
            else
                fieldNode.setAttribute('aria-invalid', invalid);
            const validationMessage = control.getAttribute('data-felte-validation-message');
            if (!validationMessage)
                fieldNode.removeAttribute('data-felte-validation-message');
            else
                fieldNode.setAttribute('data-felte-validation-message', validationMessage);
        });
    }
    function handleReset(e) {
        if (!onFormReset)
            return;
        setControlValue(control, defaultValue);
        onFormReset(e);
    }
    function field(node) {
        fieldNode = node;
        let observer;
        let formElement;
        if (isFormControl(node)) {
            control = node;
            control.name = name;
            return {};
        }
        else {
            // This setTimeout is necessary to guarantee the node has been mounted
            let created = false;
            let destroyed = false;
            setTimeout(() => {
                if (destroyed)
                    return;
                const parent = fieldNode.parentNode;
                if (!parent || !isElement(parent))
                    return;
                const foundControl = parent.querySelector(`[name="${name}"]`);
                if (!foundControl || !isFormControl(foundControl)) {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = name;
                    parent.insertBefore(input, node.nextSibling);
                    control = input;
                    created = true;
                }
                else {
                    control = foundControl;
                }
                setControlValue(control, defaultValue);
                observer = new MutationObserver(mutationCallback);
                observer.observe(control, observerConfig);
                formElement = control.closest('form');
                formElement === null || formElement === void 0 ? void 0 : formElement.addEventListener('reset', handleReset);
            });
            return {
                destroy() {
                    var _a;
                    if (created)
                        (_a = control.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(control);
                    destroyed = true;
                    observer === null || observer === void 0 ? void 0 : observer.disconnect();
                    formElement === null || formElement === void 0 ? void 0 : formElement.removeEventListener('reset', handleReset);
                },
            };
        }
    }
    function onInput(value) {
        dispatchEvent(touchOnChange ? 'change' : 'input', value);
    }
    function onBlur() {
        dispatchEvent('focusout');
    }
    return {
        field,
        onInput,
        onChange: onInput,
        onBlur,
    };
}

export { createField };
//# sourceMappingURL=create-field.js.map
