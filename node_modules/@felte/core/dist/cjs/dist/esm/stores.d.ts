import type { StoreFactory, Obj, Keyed, FormConfig, Errors, Touched, ValidationFunction, PartialWritableErrors, Writable, Readable } from '@felte/common';
export declare function errorFilterer(touchValue?: unknown, errValue?: unknown): any[] | import("@felte/common").DeepSetResult<Record<string, unknown>, null> | null | undefined;
export declare function warningFilterer(touchValue?: unknown, errValue?: unknown): any[] | import("@felte/common").DeepSetResult<Record<string, unknown>, null> | null | undefined;
type Readables = Readable<any> | [Readable<any>, ...Array<Readable<any>>] | Array<Readable<any>>;
type ReadableValues<T> = T extends Readable<infer U> ? [U] : {
    [K in keyof T]: T[K] extends Readable<infer U> ? U : never;
};
type PossibleWritable<T> = Readable<T> & {
    update?: (updater: (v: T) => T) => void;
    set?: (v: T) => void;
};
export declare function createDerivedFactory<StoreExt = Record<string, any>>(storeFactory: StoreFactory<StoreExt>): <R, T extends Readables = Readables>(storeOrStores: T, deriver: (values: ReadableValues<T>) => R, initialValue: R) => [Readable<R> & {
    update?: ((updater: (v: R) => R) => void) | undefined;
    set?: ((v: R) => void) | undefined;
} & StoreExt, () => void, () => void];
export declare function createStores<Data extends Obj, StoreExt = Record<string, any>>(storeFactory: StoreFactory<StoreExt>, config: FormConfig<Data> & {
    preventStoreStart?: boolean;
}): {
    data: Omit<Writable<Data>, "subscribe"> & {
        subscribe(subscriber: (values: Keyed<Data>) => any): () => void;
    } & StoreExt;
    errors: PartialWritableErrors<Data> & StoreExt;
    warnings: PartialWritableErrors<Data> & StoreExt;
    touched: Readable<Touched<Data>> & {
        set(this: void, value: Touched<Data>): void;
        update(this: void, updater: import("@felte/common").Updater<Touched<Data>>): void;
    } & StoreExt;
    isValid: Readable<boolean> & {
        update?: ((updater: (v: boolean) => boolean) => void) | undefined;
        set?: ((v: boolean) => void) | undefined;
    } & StoreExt;
    isSubmitting: Readable<boolean> & {
        set(this: void, value: boolean): void;
        update(this: void, updater: import("@felte/common").Updater<boolean>): void;
    } & StoreExt;
    isDirty: Readable<boolean> & {
        set(this: void, value: boolean): void;
        update(this: void, updater: import("@felte/common").Updater<boolean>): void;
    } & StoreExt;
    isValidating: Readable<boolean> & {
        update?: ((updater: (v: boolean) => boolean) => void) | undefined;
        set?: ((v: boolean) => void) | undefined;
    } & StoreExt;
    interacted: Readable<string | null> & {
        set(this: void, value: string | null): void;
        update(this: void, updater: import("@felte/common").Updater<string | null>): void;
    } & StoreExt;
    validateErrors: (data: Data | Keyed<Data>, altValidate?: ValidationFunction<Data> | ValidationFunction<Data>[]) => Promise<Errors<Data> | undefined>;
    validateWarnings: (data: Data | Keyed<Data>, altWarn?: ValidationFunction<Data> | ValidationFunction<Data>[]) => Promise<Errors<Data> | undefined>;
    cleanup: () => void;
    start: () => () => void;
};
export {};
//# sourceMappingURL=stores.d.ts.map