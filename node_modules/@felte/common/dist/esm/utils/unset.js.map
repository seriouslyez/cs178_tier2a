{"version":3,"file":"unset.js","sources":["../../../src/utils/unset.ts"],"sourcesContent":["import type { Obj } from '../types';\nimport { _cloneDeep } from './cloneDeep';\nimport { _get } from './get';\n\n/** @ignore */\nexport function _unset(obj: undefined, path: string | string[]): undefined;\nexport function _unset<Data extends Obj>(\n  obj: Data,\n  path: string | string[]\n): Data;\nexport function _unset<Data extends Obj>(\n  obj: Data | undefined,\n  path: string | string[]\n): Data | undefined {\n  if (!obj || Object(obj) !== obj) return;\n  // When obj is not an object\n  else if (typeof obj !== 'undefined') obj = _cloneDeep<Data>(obj);\n  // If not yet an array, get the keys from the string-path\n  const newPath = !Array.isArray(path)\n    ? path.toString().match(/[^.[\\]]+/g) || []\n    : path;\n  const foundProp: any =\n    newPath.length === 1 ? obj : _get(obj, newPath.slice(0, -1).join('.'));\n  if (Array.isArray(foundProp)) {\n    foundProp.splice(Number(newPath[newPath.length - 1]), 1);\n  } else {\n    delete foundProp?.[newPath[newPath.length - 1]];\n  }\n  return obj as Data;\n}\n"],"names":[],"mappings":";;;AAUgB,SAAA,MAAM,CACpB,GAAqB,EACrB,IAAuB,EAAA;IAEvB,IAAI,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,GAAG;QAAE,OAAO;;SAEnC,IAAI,OAAO,GAAG,KAAK,WAAW;AAAE,QAAA,GAAG,GAAG,UAAU,CAAO,GAAG,CAAC,CAAC;;IAEjE,MAAM,OAAO,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;UAChC,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE;UACxC,IAAI,CAAC;AACT,IAAA,MAAM,SAAS,GACb,OAAO,CAAC,MAAM,KAAK,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AACzE,IAAA,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;AAC5B,QAAA,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC1D,KAAA;AAAM,SAAA;AACE,QAAA,SAAS,KAAT,IAAA,IAAA,SAAS,KAAT,KAAA,CAAA,GAAA,IAAA,GAAA,OAAA,SAAS,CAAG,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;AACjD,KAAA;AACD,IAAA,OAAO,GAAW,CAAC;AACrB;;;;"}