import { isFormControl, isFieldSetElement, isInputElement, isSelectElement } from './typeGuards.js';
import { _get } from './get.js';
import { _set } from './set.js';
import { _update } from './update.js';
import { getPath } from './getPath.js';

/**
 * @ignore
 */
function getFormControls(el) {
    if (isFormControl(el))
        return [el];
    if (el.childElementCount === 0)
        return [];
    const foundControls = new Set();
    for (const child of el.children) {
        if (isFormControl(child))
            foundControls.add(child);
        if (isFieldSetElement(child)) {
            for (const fieldsetChild of child.elements) {
                if (isFormControl(fieldsetChild))
                    foundControls.add(fieldsetChild);
            }
        }
        if (child.childElementCount > 0)
            getFormControls(child).forEach((value) => foundControls.add(value));
    }
    return Array.from(foundControls);
}
/**
 * @ignore
 */
function addAttrsFromFieldset(fieldSet) {
    for (const element of fieldSet.elements) {
        if (!isFormControl(element) && !isFieldSetElement(element))
            continue;
        if (fieldSet.hasAttribute('data-felte-keep-on-remove') &&
            !element.hasAttribute('data-felte-keep-on-remove')) {
            element.dataset.felteKeepOnRemove = fieldSet.dataset.felteKeepOnRemove;
        }
    }
}
/** @ignore */
function getInputTextOrNumber(el) {
    if (el.type.match(/^(number|range)$/)) {
        return !el.value ? undefined : +el.value;
    }
    else {
        return el.value;
    }
}
/**
 * @ignore
 */
function getFormDefaultValues(node) {
    var _a;
    let defaultData = {};
    let defaultTouched = {};
    for (const el of node.elements) {
        if (isFieldSetElement(el))
            addAttrsFromFieldset(el);
        if (!isFormControl(el) || !el.name)
            continue;
        const elName = getPath(el);
        if (isInputElement(el)) {
            if (el.type === 'checkbox') {
                if (typeof _get(defaultData, elName) === 'undefined') {
                    const checkboxes = Array.from(node.querySelectorAll(`[name="${el.name}"]`)).filter((checkbox) => {
                        if (!isFormControl(checkbox))
                            return false;
                        return elName === getPath(checkbox);
                    });
                    if (checkboxes.length === 1) {
                        defaultData = _set(defaultData, elName, el.checked);
                        defaultTouched = _set(defaultTouched, elName, false);
                        continue;
                    }
                    defaultData = _set(defaultData, elName, el.checked ? [el.value] : []);
                    defaultTouched = _set(defaultTouched, elName, false);
                    continue;
                }
                if (Array.isArray(_get(defaultData, elName)) && el.checked) {
                    defaultData = _update(defaultData, elName, (value) => [
                        ...value,
                        el.value,
                    ]);
                }
                continue;
            }
            if (el.type === 'radio') {
                if (_get(defaultData, elName))
                    continue;
                defaultData = _set(defaultData, elName, el.checked ? el.value : undefined);
                defaultTouched = _set(defaultTouched, elName, false);
                continue;
            }
            if (el.type === 'file') {
                defaultData = _set(defaultData, elName, el.multiple ? Array.from(el.files || []) : (_a = el.files) === null || _a === void 0 ? void 0 : _a[0]);
                defaultTouched = _set(defaultTouched, elName, false);
                continue;
            }
        }
        else if (isSelectElement(el)) {
            const multiple = el.multiple;
            if (!multiple) {
                defaultData = _set(defaultData, elName, el.value);
            }
            else {
                const selectedOptions = Array.from(el.options)
                    .filter((opt) => opt.selected)
                    .map((opt) => opt.value);
                defaultData = _set(defaultData, elName, selectedOptions);
            }
            defaultTouched = _set(defaultTouched, elName, false);
            continue;
        }
        const inputValue = getInputTextOrNumber(el);
        defaultData = _set(defaultData, elName, inputValue);
        defaultTouched = _set(defaultTouched, elName, false);
    }
    return { defaultData, defaultTouched };
}
function setControlValue(el, value) {
    var _a;
    if (!isFormControl(el))
        return;
    const fieldValue = value;
    if (isInputElement(el)) {
        if (el.type === 'checkbox') {
            const checkboxesDefaultData = fieldValue;
            if (typeof checkboxesDefaultData === 'undefined' ||
                typeof checkboxesDefaultData === 'boolean') {
                el.checked = !!checkboxesDefaultData;
                return;
            }
            if (Array.isArray(checkboxesDefaultData)) {
                if (checkboxesDefaultData.includes(el.value)) {
                    el.checked = true;
                }
                else {
                    el.checked = false;
                }
            }
            return;
        }
        if (el.type === 'radio') {
            const radioValue = fieldValue;
            if (el.value === radioValue)
                el.checked = true;
            else
                el.checked = false;
            return;
        }
        if (el.type === 'file') {
            el.files = null;
            el.value = '';
            return;
        }
    }
    else if (isSelectElement(el)) {
        const multiple = el.multiple;
        if (!multiple) {
            el.value = String(fieldValue !== null && fieldValue !== void 0 ? fieldValue : '');
            for (const option of el.options) {
                if (option.value === String(fieldValue)) {
                    option.selected = true;
                }
                else {
                    option.selected = false;
                }
            }
        }
        else if (Array.isArray(fieldValue)) {
            el.value = String((_a = fieldValue[0]) !== null && _a !== void 0 ? _a : '');
            const stringValues = fieldValue.map((v) => String(v));
            for (const option of el.options) {
                if (stringValues.includes(option.value)) {
                    option.selected = true;
                }
                else {
                    option.selected = false;
                }
            }
        }
        return;
    }
    el.value = String(fieldValue !== null && fieldValue !== void 0 ? fieldValue : '');
}
/** Sets the form inputs value to match the data object provided. */
function setForm(node, data) {
    for (const el of node.elements) {
        if (isFieldSetElement(el))
            addAttrsFromFieldset(el);
        if (!isFormControl(el) || !el.name)
            continue;
        const elName = getPath(el);
        setControlValue(el, _get(data, elName));
    }
}

export { addAttrsFromFieldset, getFormControls, getFormDefaultValues, getInputTextOrNumber, setControlValue, setForm };
//# sourceMappingURL=domUtils.js.map
