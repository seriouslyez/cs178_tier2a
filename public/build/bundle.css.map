{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Collection.svelte",
    "Login.svelte",
    "Summary.svelte"
  ],
  "sourcesContent": [
    "<!-- Code referenced from https://svelte.dev/repl/8eb738732cf74edd86f680c53e6ba253?version=3.44.2 -->\n\n<script>\n\timport { createForm } from \"felte\";\n\timport { writable } from 'svelte/store';\n\timport { users, numUsers, currentUserNum, availabilities, checks, locations, startTimes, endTimes, timerNumber, days, times, locationNames, vchecks } from './stores.js';\n\t\n\texport let initialValues;\n\texport let onSubmit;\n\texport let onBack;\n\tlet currUser;\n\tlet boxes;\n\tlet locs;\n\n    // PL concept: writable stores, reactive values #reactive\n\tchecks.subscribe(val => {boxes = val[$currentUserNum]});\n\tusers.subscribe(val => {currUser = val[$currentUserNum]});\n\tlocations.subscribe(val => {locs = val[$currentUserNum]});\n\t\n\tconst { form, data } = createForm({ onSubmit, initialValues })\n\n    // a bunch of data structures to track availabilities, days, times, button IDs\n\texport let dt = [];\n\texport let currAvail;\n\n\tavailabilities.subscribe(val => {currAvail = val[$currentUserNum]});\n\n\texport let ut = [];\n\tfor (let i = 0; i < times.length; i++) {\n\t  ut.push(times[i] + currUser);\n\t}\n\n\texport let ud = [];\n\tfor (let i = 0; i < days.length; i++) {\n\t  ud.push(days[i] + currUser);\n\t}\n  \n\tfor (let i = 0; i < times.length; i++) {\n\t    dt.push([]);\n\t    for (let j = 0; j < days.length; j++) {\n\t      dt[i].push(days[j] + times[i]);\n\t    }\n\t}\n\n    // concept: availability preference\n    // function to rotate through the 3 preferences\n\tfunction changeColor(color) {\n\t  if (color == \"gray\") {\n\t    return \"green\";\n\t  }\n\t  if (color == \"green\") {\n\t    return \"yellow\";\n\t  }\n\t  return \"gray\";\n\t}\n\n    // rotate the color of a specific cell, or, if called from checkbox,\n    // change to a fixed color\n    // concepts: availability preference, logic-based rendering\n\tfunction changeThisColor(id, i, j, auto) {\n\t  // if just clicking one box\n\t  if (auto == \"auto\") {\n\t\tlet currColor = document.getElementById(id).style.background;\n\t\tdocument.getElementById(id).style.background = \n\t\t  changeColor(currColor);\n\t\tif (currColor == \"green\") {\n\t\t  boxes[i] = false;\n\t\t  $checks[$currentUserNum][i] = boxes[i];\n\t\t  $vchecks[$currentUserNum][j] = false;\n\t\t  document.getElementById(ud[j]).checked = false;\n\t\t  document.getElementById(ut[i]).checked = false;\n\t\t}\n\t  } else { // if calling from a checkbox\n\t    document.getElementById(id).style.background = auto;\n\t  }\n\t  // update writable stores with new user data\n\t  currAvail[i][j] = document.getElementById(id).style.background;\n\t  $availabilities[$currentUserNum][i][j] = currAvail[i][j];\n\t  }\n\n    // change color for a location preference\n    // concept: location, availability conditioned on location\n\tfunction changeLocColor(id, i) {\n\t\tlet currColor = document.getElementById(id).style.background;\n\t\tdocument.getElementById(id).style.background = changeColor(currColor);\n\t  locs[i] = document.getElementById(id).style.background;\n\t  $locations[$currentUserNum][i] = locs[i];\n\t}\n\n    // click a horizontal checkbox indicating availability for all 7 days\n    // for one time slot\n    // concept: logic-based rendering, binary availability\n    // can only toggle between all green & all gray\n\tfunction clickCheckbox(row) {\n\t  console.log(\"checkbox clicked at \", row);\n      if (document.getElementById(ut[row]).checked) {\n        for (let j = 0; j < days.length; j++) {\n          changeThisColor(dt[row][j], row, j, \"green\");\n        }\n        boxes[row] = false;\n      } else {\n        for (let j = 0; j < days.length; j++) {\n          changeThisColor(dt[row][j], row, j, \"gray\");\n        } \n        boxes[row] = true;\n      }\n      $checks[$currentUserNum][row] = boxes[row];\n\t}\n\n    // same as above, but for vertical checkboxes, indicating availability\n    // for all times on one day\n\tfunction clickVCheckbox(column) {\n\t  if (document.getElementById(ud[column]).checked) {\n        for (let j = 0; j < times.length; j++) {\n          changeThisColor(dt[j][column], j, column, \"green\");\n        }\n        $vchecks[$currentUserNum][column] = false;\n\t  } else {\n\t    for (let j = 0; j < times.length; j++) {\n\t      changeThisColor(dt[j][column], j, column, \"gray\");\n\t    }\n\t    $vchecks[$currentUserNum][column] = true;\n\t  }\n\t}\n\n\n</script>\n\n<div class=\"jumbotron\">\n\t<h1 class=\"display-4\">Enter Availability for {currUser}</h1>\n\t<hr class=\"my-4\">\n\t<p class=\"lead\"><span class=\"bolded\">Select once for \"Available\" and twice for \"If need be\".</span></p>\n\t<p>Note: all times in Eastern Standard Time.</p>\n  </div>\n\n<div class=\"container\">\n\t<form use:form>\n\t\t<label for=aboutMe style=\"font-size:1.5em\">Select preferred location(s):</label><br>\n\t\t<div class=\"d-grid my-3\">\n\t\t{#each locationNames as location, i}\n\t\t\n\t\t\t<button id={location} style=\"background:{locs[i]};color:black;border:blue 2px;\" class=\"btn btn-primary btn-login text-uppercase fw-bold btn-loc\" type=\"button\" on:click={() => changeLocColor(location, i)}>{locationNames[i]}   \n\t\t\t\t</button>    \n\t\t{/each}\n\n\t\t</div>\n\t\t\n\t\t<div class=\"table-responsive\">\n\t\t    <!-- display all days and times in a 2D grid - concept: logic-based rendering -->\n\t\t\t<table class=\"table table-bordered text-center\">\n\t\t\t\t<thead>\n\t\t\t\t    <tr> \n\t\t\t\t      <th></th>\n\t\t\t\t      {#each days as day, i}\n\t\t\t\t      <th><input type=\"checkbox\" id={ud[i]} name={day} value={day} on:click={() => clickVCheckbox(i)}></th>\n\t\t\t\t      {/each}\n\t\t\t\t    </tr>\n\t\t\t\t\t<tr class=\"bg-light-gray\">\n\t\t\t\t\t\t<td class=\"text-uppercase freeze\">Time\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td class=\"text-uppercase freeze\">Monday</td>\n\t\t\t\t\t\t<td class=\"text-uppercase freeze\">Tuesday</td>\n\t\t\t\t\t\t<td class=\"text-uppercase freeze\">Wednesday</td>\n\t\t\t\t\t\t<td class=\"text-uppercase freeze\">Thursday</td>\n\t\t\t\t\t\t<td class=\"text-uppercase freeze\">Friday</td>\n\t\t\t\t\t\t<td class=\"text-uppercase freeze\">Saturday</td>\n\t\t\t\t\t\t<td class=\"text-uppercase freeze\">Sunday</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t{#each times as time, i}\n\t\t\t\t\t<tr id={i}>\n\t\t\t\t\t\t<td><input type=\"checkbox\" id={ut[i]} name={time} value={time} on:click={() => clickCheckbox(i)}></td>\n\t\t\t\t\t\t{#each days as day, j}\n\t\t\t\t\t\t  <!-- change color on user click -->\n\t\t\t\t\t\t  <td nowrap style=\"background:{currAvail[i][j]};color:black\" id={dt[i][j]}>\n\t\t\t\t\t\t\t<button style=\"width:100%\" type=\"button\" class=\"btn btn-primary text-uppercase fw-bold\" on:click={() => changeThisColor(dt[i][j], i, j, \"auto\")}>{time}  \n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t  </td>\n\t\t\t\t\t\t{/each}\n\t\t\t\t  \t</tr>\n\t\t\t\t  \t{/each}\n\t\t\t\t</thead>\n\t\t\t</table>\n\t\t</div>\n\t\t<div class=\"d-grid my-3\">\n\t\t\t<button class=\"btn btn-primary btn-login text-uppercase fw-bold\" type=\"button\" value=\"Back\" on:click={() => onBack($data)}>Back\n\t\t\t\t</button>\n\t\t\t\t\n\t\t\t<button class=\"btn btn-primary btn-login text-uppercase fw-bold\" type=\"submit\" value=\"Submit\">Submit\n\t\t\t  </button>\n\t\t</div>\n\t</form>\n</div>\n\t\t\t\n\n<style>\n\n.bg-light-gray {\n    background-color: #f7f7f7;\n}\n.table-bordered thead td, .table-bordered thead th {\n    border-bottom-width: 2px;\n}\n.table thead th {\n    vertical-align: bottom;\n    border-bottom: 2px solid #dee2e6;\n}\n.table-bordered td, .table-bordered th {\n    border: 1px solid #dee2e6;\n}\n\n.table-bordered td, .table-bordered th {\n    border: 1px solid #dee2e6;\n}\n.table td, .table th {\n    padding: .75rem;\n    vertical-align: top;\n    border-top: 1px solid #dee2e6;\n}\n\n.btn-login {\n  font-size: 0.9rem;\n  letter-spacing: 0.05rem;\n  padding: 0.75rem 1rem;\n}\n.bolded { \n\tfont-weight: bold; \n}\n.btn-loc {\n\tmargin-right: 5px;\n}\n</style>\n\n\n",
    "<!-- Code referenced from https://svelte.dev/repl/8eb738732cf74edd86f680c53e6ba253?version=3.44.2 -->\n\n<script>\n\timport { createForm } from \"felte\";\n\timport { users, numUsers } from './stores.js';\n\t//export let initialValues;\n\texport let onSubmit;\n\texport let onSummary;\n\t\t\t            \n\tconst { form, data } = createForm({ onSubmit, initialValues: {firstName: '', lastName: ''}})\n\t\n</script>\n\n<body>\n\t<div class=\"container\">\n\t  <div class=\"row\">\n\t\t<div class=\"col-sm-9 col-md-7 col-lg-5 mx-auto\">\n\t\t  <div class=\"card border-0 shadow rounded-3 my-5\">\n\t\t\t<div class=\"jumbotron\">\n\t\t\t\t<h1 class=\"display-4\">What's your availability?</h1>\n\t\t\t  </div>\n\t\t\t<div class=\"card-body p-4 p-sm-5\">\n\t\t\t  <!-- <h5 class=\"card-title text-center mb-5 fw-light fs-5\">What's your availability?</h5> -->\n\t\t\t  <form use:form>\n\t\t\t  <!-- concept: login by name -->\n\t\t\t\t<div class=\"form-floating mb-3\">\n\t\t\t\t  <input type=\"text\" class=\"form-control\" id=\"firstName\" placeholder=\"First Name\" name=\"firstName\" value = \"\">\n\t\t\t\t</div>\n\t\t\t\t<div class=\"form-floating mb-3\">\n\t\t\t\t  <input type=\"text\" class=\"form-control\" id=\"lastName\" placeholder=\"Last Name\" name=lastName value = \"\">\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div class=\"d-grid my-3\">\n\t\t\t\t  <button class=\"btn btn-primary btn-login text-uppercase fw-bold\" type=\"submit\">Submit\n\t\t\t\t\t</button>\n\t\t\t\t\n\t\t\t\t\t<button class=\"btn btn-primary btn-login text-uppercase fw-bold\" type=\"button\" value=\"Summary\" on:click={() => onSummary($data)}>View Summary\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t  </form>\n\t\t\t</div>\n\t\t  </div>\n\t\t</div>\n\t  </div>\n\t</div>\n  </body>\n\n  <style>\n\tbody {\n  background: #007bff;\n  background: linear-gradient(to right, #0062E6, #33AEFF);\n}\n\n.btn-login {\n  font-size: 0.9rem;\n  letter-spacing: 0.05rem;\n  padding: 0.75rem 1rem;\n}\n</style>",
    "<script>\n\timport { createForm } from \"felte\";\n\timport { writable } from 'svelte/store';\n\timport { users, numUsers, currentUserNum, availabilities, checks, locations, startTimes, endTimes, timerNumber, days, times, locationNames, vchecks } from './stores.js';\n\t\n\texport let onBack;\n\n\t// summary structures\n\t\tlet availSums = [];\n\t\tlet needSums = []\n\n\t\tlet availLocs = [0, 0, 0, 0, 0];\n\t\tlet needLocs = [0, 0, 0, 0, 0];\n\t\n\t// create summaries only if there is at least one user\n\tif ($numUsers > 0) {\t\n\t\tfor (let i = 0; i < times.length; i++) {\n\t\t\tavailSums.push([]);\n\t\t\tneedSums.push([]);\n\t\t\tfor (let j = 0; j < days.length; j++) {\n\t\t\t\tavailSums[i].push(0);\n\t\t\t\tneedSums[i].push(0);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (let u = 0; u < $numUsers; u++) {\n\t\t\tfor (let i = 0; i < locationNames.length; i++) {\n\t\t\t\tif ($locations[u][i] === \"green\") {\n\t\t\t\t\tavailLocs[i] += 1;\n\t\t\t\t\tneedLocs[i] += 1;\n\t\t\t\t} else if ($locations[u][i] === \"yellow\") {\n\t\t\t\t\tneedLocs[i] += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (let i = 0; i < times.length; i++) {\n\t\t\t\tfor (let j = 0; j < days.length; j++) {\n\t\t\t\t\tif ($availabilities[u][i][j] === \"green\") {\n\t\t\t\t\t\tavailSums[i][j] += 1;\n\t\t\t\t\t\tneedSums[i][j] += 1;\n\t\t\t\t\t} else if ($availabilities[u][i][j] === \"yellow\") {\n\t\t\t\t\t\tneedSums[i][j] += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// functions to toggle available vs if need be summaries\n\tlet screen = 0;\n\n\tfunction setAvail() {\n\t\tif (screen == 0){ \n\t\t\treturn;\n\t\t} else {\n\t\t\tscreen -= 1\n\t\t}\n\t}\n\n\tfunction setNeed(){\n\t\tif (screen == 1) {\n\t\t\treturn;\n\t\t} else {\n\t\t\tscreen += 1\n\t\t}\n\t}\n\n</script>\n\n<body>\n    <div class=\"jumbotron\">\n        <h1 class=\"display-4\">Availability Summary</h1>\n    </div>\n\t<div>\n\t{#if $users.length >= 1 }\n\t<div>\n\t\t<p class=\"lead room\">Toggle between 'Definitely Available' and 'Include Possibles'</p>\n\t\t<p class=\"room bolded\">Note: 'Include Possibles' adds if need be availabilities to definite availabilities</p>\n\t</div>\n\t<div class=\"d-grid my-3\">\n        <button class=\"btn btn-primary btn-login text-uppercase fw-bold room\" type=\"button\" value=\"avail\" on:click={() => setAvail()}>Definitely Available\n            </button>\n    \n        <button class=\"btn btn-primary btn-login text-uppercase fw-bold less\" type=\"button\" value=\"need\" on:click={() => setNeed()}>Include Possibles\n            </button>\n    </div>\n\t<!-- Summary of Locations-->\n\t<div class=\"table-responsive\">\n\t\t<!-- display all days and times in a 2D grid - concept: logic-based rendering -->\n\t\t<table class=\"table table-bordered text-center\">\n\t\t\t<thead>\n\t\t\t\t<tr class=\"bg-light-gray\">\n\t\t\t\t\t{#each locationNames as ln, i}\n\t\t\t\t\t<td class=\"text-uppercase freeze\">{ln}</td>\n\t\t\t\t\t{/each}\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t{#each locationNames as ln, i}\n\t\t\t\t\t{#if screen == 0}\n\t\t\t\t\t\t{#if availLocs[i] > 0}\n\n\t\t\t\t\t  \t<td nowrap style=\"background: #FFFACD;color:black\" >\n\t\t\t\t\t\t\t{availLocs[i]}\n\t\t\t\t\t  \t</td>\n\t\t\t\t\t  \t{:else}\n\t\t\t\t\t\t<td nowrap style=\"background: #F5F5F5;color:black\" >\n\t\t\t\t\t\t\t{availLocs[i]}\n\t\t\t\t\t  \t</td>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{:else}\n\t\t\t\t\t\t{#if needLocs[i] > 0} \n\t\t\t\t\t  \t<td nowrap style=\"background: #FFFACD;color:black\" >\n\t\t\t\t\t\t\t{needLocs[i]}\n\t\t\t\t\t  \t</td>\n\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t<td nowrap style=\"background: #F5F5F5;color:black\" >\n\t\t\t\t\t\t\t{needLocs[i]}\n\t\t\t\t\t  \t</td>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t  {/if}\n\t\t\t\t\t{/each}\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t</table>\n\t</div>\n\t<!--Summary of Times-->\n\t<div class=\"table-responsive\">\n\t\t<!-- display all days and times in a 2D grid - concept: logic-based rendering -->\n\t\t<table class=\"table table-bordered text-center\">\n\t\t\t<thead>\n\t\t\t\t<tr class=\"bg-light-gray\">\n\t\t\t\t\t<td class=\"text-uppercase freeze\">Time\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"text-uppercase freeze\">Monday</td>\n\t\t\t\t\t<td class=\"text-uppercase freeze\">Tuesday</td>\n\t\t\t\t\t<td class=\"text-uppercase freeze\">Wednesday</td>\n\t\t\t\t\t<td class=\"text-uppercase freeze\">Thursday</td>\n\t\t\t\t\t<td class=\"text-uppercase freeze\">Friday</td>\n\t\t\t\t\t<td class=\"text-uppercase freeze\">Saturday</td>\n\t\t\t\t\t<td class=\"text-uppercase freeze\">Sunday</td>\n\t\t\t\t</tr>\n\t\t\t\t{#each times as time, i}\n\t\t\t\t<tr id={i}>\n\t\t\t\t\t<td>{time}</td>\n\t\t\t\t\t{#each days as day, j}\n\n\t\t\t\t\t{#if screen == 0}\n\t\t\t\t\t\t{#if availSums[i][j] > 0}\n\n\t\t\t\t\t  \t<td nowrap style=\"background: #FFFACD;color:black\" >\n\t\t\t\t\t\t\t{availSums[i][j]}\n\t\t\t\t\t  \t</td>\n\t\t\t\t\t  \t{:else}\n\t\t\t\t\t\t<td nowrap style=\"background: #F5F5F5;color:black\" >\n\t\t\t\t\t\t\t{availSums[i][j]}\n\t\t\t\t\t  \t</td>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t  {:else}\n\t\t\t\t\t\t{#if needSums[i][j] > 0} \n\t\t\t\t\t  \t<td nowrap style=\"background: #FFFACD;color:black\" >\n\t\t\t\t\t\t\t{needSums[i][j]}\n\t\t\t\t\t  \t</td>\n\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t<td nowrap style=\"background: #F5F5F5;color:black\" >\n\t\t\t\t\t\t\t{needSums[i][j]}\n\t\t\t\t\t  \t</td>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t  {/if}\n\t\t\t\t\t{/each}\n\t\t\t\t  </tr>\n\t\t\t\t  {/each}\n\t\t\t</thead>\n\t\t</table>\n\t</div>\n\t{:else}\n\t<p class=\"lead\"><span class=\"bolded room\">Summary Unavailable: Please enter availability first.</span></p>\n\t{/if}\n\t</div>\n    <div class=\"d-grid my-3\">\n        <button class=\"btn btn-primary btn-login text-uppercase fw-bold room\" type=\"button\" value=\"Back\" on:click={() => onBack()}>Back\n            </button>\n    </div>\n</body>\n<style>\n\t.room {\n\t\tmargin-left: 20px;\n\t}\n\t.less {\n\t\tmargin-left: 10px;\n\t}\n\t.bolded { \n\tfont-weight: bold; \n\t}\n</style>"
  ],
  "names": [],
  "mappings": "AAoMA,cAAc,4BAAC,CAAC,AACZ,gBAAgB,CAAE,OAAO,AAC7B,CAAC,AACD,6BAAe,CAAC,KAAK,CAAC,gBAAE,CAAE,6BAAe,CAAC,KAAK,CAAC,EAAE,cAAC,CAAC,AAChD,mBAAmB,CAAE,GAAG,AAC5B,CAAC,AACD,oBAAM,CAAC,KAAK,CAAC,EAAE,cAAC,CAAC,AACb,cAAc,CAAE,MAAM,CACtB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AACpC,CAAC,AACD,6BAAe,CAAC,gBAAE,CAAE,6BAAe,CAAC,EAAE,cAAC,CAAC,AACpC,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AAC7B,CAAC,AAED,6BAAe,CAAC,gBAAE,CAAE,6BAAe,CAAC,EAAE,cAAC,CAAC,AACpC,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AAC7B,CAAC,AACD,oBAAM,CAAC,gBAAE,CAAE,oBAAM,CAAC,EAAE,cAAC,CAAC,AAClB,OAAO,CAAE,MAAM,CACf,cAAc,CAAE,GAAG,CACnB,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AACjC,CAAC,AAED,UAAU,4BAAC,CAAC,AACV,SAAS,CAAE,MAAM,CACjB,cAAc,CAAE,OAAO,CACvB,OAAO,CAAE,OAAO,CAAC,IAAI,AACvB,CAAC,AACD,OAAO,4BAAC,CAAC,AACR,WAAW,CAAE,IAAI,AAClB,CAAC,AACD,QAAQ,4BAAC,CAAC,AACT,YAAY,CAAE,GAAG,AAClB,CAAC;ACpLA,IAAI,eAAC,CAAC,AACL,UAAU,CAAE,OAAO,CACnB,UAAU,CAAE,gBAAgB,EAAE,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,AACzD,CAAC,AAED,UAAU,eAAC,CAAC,AACV,SAAS,CAAE,MAAM,CACjB,cAAc,CAAE,OAAO,CACvB,OAAO,CAAE,OAAO,CAAC,IAAI,AACvB,CAAC;AC6HA,KAAK,eAAC,CAAC,AACN,WAAW,CAAE,IAAI,AAClB,CAAC,AACD,KAAK,eAAC,CAAC,AACN,WAAW,CAAE,IAAI,AAClB,CAAC,AACD,OAAO,eAAC,CAAC,AACT,WAAW,CAAE,IAAI,AACjB,CAAC"
}